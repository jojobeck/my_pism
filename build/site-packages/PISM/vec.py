# Copyright (C) 2011-2015, 2018 David Maxwell and Constantine Khroulev
#
# This file is part of PISM.
#
# PISM is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# PISM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License
# along with PISM; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

"""Functions and objects relating to interaction with :cpp:class:`IceModelVec`'s from python."""

import PISM


class Access(object):

    """
    Python context manager to simplify `IceModelVec` access and ghost communication.

    In PISM C++ code, one uses :cpp:member:`IceModelVec::begin_access`/:cpp:member:`IceModelVec::end_access`
    access pairs to delimit a code block allowing access to the contents of an :cpp:class`IcdeModelVec`.
    If the contents of a ghosted vector were changed in the block, :cpp:member:`IceModelVec::update_ghosts` needs to
    be called to synchronize the ghosts.  Forgetting either an :cpp:member:`end_access` or an :cpp:member:`update_ghosts`
    leads to bugs.

    Python context managers are used in conjunction with ``with`` statements to execute code at the start
    and end of a code block.  A :class:`PISM.vec.Access` context manager is used to pair up
    :cpp:member:`begin_access`/:cpp:member:`end_access` and to call :cpp:member:`update_ghosts` if needed:
    Assuming that ``v1`` and ``v2`` are vectors::

      grid = v1.get_grid()
      with PISM.vec.Access(comm=v2, nocomm=v1):
        for (i, j) in grid.points():
          v2(i, j) = v1(i, j)**3

    On entry into the ``with`` block, :cpp:member:`begin_access` is called for both ``v1`` and ``v2``.
    On exit, :cpp:member:`end_access` is called for both ``v1`` and ``v2``, and :cpp:member:`update_ghosts`
    is called for just ``v2``."""

    def __init__(self, nocomm=None, comm=None):
        """

        :param nocomm: a vector or list of vectors to access such that
                       ghost communication *will not* occur when access is done.

        :param comm:   a vector or list of vectors to access such that
                       ghost communication *will* occur when access is done.

        """
        if not nocomm is None:
            if isinstance(nocomm, list) or isinstance(nocomm, tuple):
                self.nocomm = nocomm
            else:
                self.nocomm = [nocomm]
            for v in self.nocomm:
                v.begin_access()
        else:
            self.nocomm = None

        if not comm is None:
            if isinstance(comm, list) or isinstance(comm, tuple):
                self.comm = comm
            else:
                self.comm = [comm]
            for v in self.comm:
                v.begin_access()
        else:
            self.comm = None

    def __enter__(self):
        pass

    def __exit__(self, exc_type, exc_value, traceback):
        if not self.nocomm is None:
            for v in self.nocomm:
                v.end_access()
            self.nocomm = None

        if not self.comm is None:
            for v in self.comm:
                v.end_access()
                v.update_ghosts()
            self.comm = None


def randVectorS(grid, scale, stencil_width=None):
    """Create an :cpp:class:`IceModelVec2S` of normally distributed random entries.

      :param grid:  The :cpp:class:`IceGrid` to use for creating the vector.
      :param scale: Standard deviation of normal distribution.
      :param stencil_width: Ghost stencil width for the vector. Use ``None`` to indicate
                            an unghosted vector.

    This function is not efficiently implemented.
    """

    if stencil_width is None:
        stencil_width = 0
        flag = PISM.WITHOUT_GHOSTS
    else:
        flag = PISM.WITH_GHOSTS

    rv = PISM.IceModelVec2S(grid, 'rand vec', flag, stencil_width)

    shape = (grid.xm(), grid.ym())
    import numpy as np

    r = np.random.normal(scale=scale, size=rv.shape())
    with Access(nocomm=rv):
        for (i, j) in grid.points():
            rv[i, j] = r[j - grid.ys(), i - grid.xs()]

    if stencil_width is not None:
        rv.update_ghosts()

    return rv


def randVectorV(grid, scale, stencil_width=None):
    """Create an :cpp:class:`IceModelVec2V` of normally distributed random entries.

      :param grid:  The :cpp:class:`IceGrid` to use for creating the vector.
      :param scale: Standard deviation of normal distribution.
      :param stencil_width: Ghost stencil width for the vector. Use ``None`` to indicate
                            an unghosted vector.

    This function is not efficiently implemented.
    """

    if stencil_width is None:
        stencil_width = 0
        flag = PISM.WITHOUT_GHOSTS
    else:
        flag = PISM.WITH_GHOSTS

    rv = PISM.IceModelVec2V(grid, 'rand vec', flag, stencil_width)

    import numpy as np

    r_u = np.random.normal(scale=scale, size=rv.shape()[:-1])
    r_v = np.random.normal(scale=scale, size=rv.shape()[:-1])
    with Access(nocomm=rv):
        for (i, j) in grid.points():
            rv[i, j].u = r_u[j - grid.ys(), i - grid.xs()]
            rv[i, j].v = r_v[j - grid.ys(), i - grid.xs()]

    if stencil_width is not None:
        rv.update_ghosts()

    return rv
